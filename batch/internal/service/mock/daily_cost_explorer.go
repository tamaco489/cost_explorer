// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/daily_cost_explorer.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/daily_cost_explorer.go -destination=./internal/service/mock/daily_cost_explorer.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockICostExplorerClient is a mock of ICostExplorerClient interface.
type MockICostExplorerClient struct {
	ctrl     *gomock.Controller
	recorder *MockICostExplorerClientMockRecorder
	isgomock struct{}
}

// MockICostExplorerClientMockRecorder is the mock recorder for MockICostExplorerClient.
type MockICostExplorerClientMockRecorder struct {
	mock *MockICostExplorerClient
}

// NewMockICostExplorerClient creates a new mock instance.
func NewMockICostExplorerClient(ctrl *gomock.Controller) *MockICostExplorerClient {
	mock := &MockICostExplorerClient{ctrl: ctrl}
	mock.recorder = &MockICostExplorerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICostExplorerClient) EXPECT() *MockICostExplorerClientMockRecorder {
	return m.recorder
}

// GetActualCost mocks base method.
func (m *MockICostExplorerClient) GetActualCost(ctx context.Context, startDate, endDate string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActualCost", ctx, startDate, endDate)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActualCost indicates an expected call of GetActualCost.
func (mr *MockICostExplorerClientMockRecorder) GetActualCost(ctx, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActualCost", reflect.TypeOf((*MockICostExplorerClient)(nil).GetActualCost), ctx, startDate, endDate)
}

// GetForecastCost mocks base method.
func (m *MockICostExplorerClient) GetForecastCost(ctx context.Context, actualCost float64, currentDay, daysInMonth int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForecastCost", ctx, actualCost, currentDay, daysInMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForecastCost indicates an expected call of GetForecastCost.
func (mr *MockICostExplorerClientMockRecorder) GetForecastCost(ctx, actualCost, currentDay, daysInMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForecastCost", reflect.TypeOf((*MockICostExplorerClient)(nil).GetForecastCost), ctx, actualCost, currentDay, daysInMonth)
}

// GetYesterdayCost mocks base method.
func (m *MockICostExplorerClient) GetYesterdayCost(ctx context.Context, yesterday, endDate string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYesterdayCost", ctx, yesterday, endDate)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYesterdayCost indicates an expected call of GetYesterdayCost.
func (mr *MockICostExplorerClientMockRecorder) GetYesterdayCost(ctx, yesterday, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYesterdayCost", reflect.TypeOf((*MockICostExplorerClient)(nil).GetYesterdayCost), ctx, yesterday, endDate)
}
