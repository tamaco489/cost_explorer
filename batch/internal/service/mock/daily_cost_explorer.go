// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/daily_cost_explorer.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/daily_cost_explorer.go -destination=./internal/service/mock/daily_cost_explorer.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIDailyCostExplorerClient is a mock of IDailyCostExplorerClient interface.
type MockIDailyCostExplorerClient struct {
	ctrl     *gomock.Controller
	recorder *MockIDailyCostExplorerClientMockRecorder
	isgomock struct{}
}

// MockIDailyCostExplorerClientMockRecorder is the mock recorder for MockIDailyCostExplorerClient.
type MockIDailyCostExplorerClientMockRecorder struct {
	mock *MockIDailyCostExplorerClient
}

// NewMockIDailyCostExplorerClient creates a new mock instance.
func NewMockIDailyCostExplorerClient(ctrl *gomock.Controller) *MockIDailyCostExplorerClient {
	mock := &MockIDailyCostExplorerClient{ctrl: ctrl}
	mock.recorder = &MockIDailyCostExplorerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDailyCostExplorerClient) EXPECT() *MockIDailyCostExplorerClientMockRecorder {
	return m.recorder
}

// GetActualCost mocks base method.
func (m *MockIDailyCostExplorerClient) GetActualCost(ctx context.Context, startDate, endDate string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActualCost", ctx, startDate, endDate)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActualCost indicates an expected call of GetActualCost.
func (mr *MockIDailyCostExplorerClientMockRecorder) GetActualCost(ctx, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActualCost", reflect.TypeOf((*MockIDailyCostExplorerClient)(nil).GetActualCost), ctx, startDate, endDate)
}

// GetForecastCost mocks base method.
func (m *MockIDailyCostExplorerClient) GetForecastCost(ctx context.Context, actualCost float64, currentDay, daysInMonth int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForecastCost", ctx, actualCost, currentDay, daysInMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForecastCost indicates an expected call of GetForecastCost.
func (mr *MockIDailyCostExplorerClientMockRecorder) GetForecastCost(ctx, actualCost, currentDay, daysInMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForecastCost", reflect.TypeOf((*MockIDailyCostExplorerClient)(nil).GetForecastCost), ctx, actualCost, currentDay, daysInMonth)
}

// GetYesterdayCost mocks base method.
func (m *MockIDailyCostExplorerClient) GetYesterdayCost(ctx context.Context, yesterday, endDate string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYesterdayCost", ctx, yesterday, endDate)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYesterdayCost indicates an expected call of GetYesterdayCost.
func (mr *MockIDailyCostExplorerClientMockRecorder) GetYesterdayCost(ctx, yesterday, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYesterdayCost", reflect.TypeOf((*MockIDailyCostExplorerClient)(nil).GetYesterdayCost), ctx, yesterday, endDate)
}
