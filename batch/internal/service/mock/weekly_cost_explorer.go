// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/weekly_cost_explorer.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/weekly_cost_explorer.go -destination=./internal/service/mock/weekly_cost_explorer.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIWeeklyCostExplorerClient is a mock of IWeeklyCostExplorerClient interface.
type MockIWeeklyCostExplorerClient struct {
	ctrl     *gomock.Controller
	recorder *MockIWeeklyCostExplorerClientMockRecorder
	isgomock struct{}
}

// MockIWeeklyCostExplorerClientMockRecorder is the mock recorder for MockIWeeklyCostExplorerClient.
type MockIWeeklyCostExplorerClientMockRecorder struct {
	mock *MockIWeeklyCostExplorerClient
}

// NewMockIWeeklyCostExplorerClient creates a new mock instance.
func NewMockIWeeklyCostExplorerClient(ctrl *gomock.Controller) *MockIWeeklyCostExplorerClient {
	mock := &MockIWeeklyCostExplorerClient{ctrl: ctrl}
	mock.recorder = &MockIWeeklyCostExplorerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWeeklyCostExplorerClient) EXPECT() *MockIWeeklyCostExplorerClientMockRecorder {
	return m.recorder
}

// CalcPercentageChange mocks base method.
func (m *MockIWeeklyCostExplorerClient) CalcPercentageChange(ctx context.Context, lastWeekCost, weekBeforeLastCost float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcPercentageChange", ctx, lastWeekCost, weekBeforeLastCost)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalcPercentageChange indicates an expected call of CalcPercentageChange.
func (mr *MockIWeeklyCostExplorerClientMockRecorder) CalcPercentageChange(ctx, lastWeekCost, weekBeforeLastCost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcPercentageChange", reflect.TypeOf((*MockIWeeklyCostExplorerClient)(nil).CalcPercentageChange), ctx, lastWeekCost, weekBeforeLastCost)
}

// GetLastWeekCost mocks base method.
func (m *MockIWeeklyCostExplorerClient) GetLastWeekCost(ctx context.Context, lastWeekStartDate, lastWeekEndDate string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastWeekCost", ctx, lastWeekStartDate, lastWeekEndDate)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastWeekCost indicates an expected call of GetLastWeekCost.
func (mr *MockIWeeklyCostExplorerClientMockRecorder) GetLastWeekCost(ctx, lastWeekStartDate, lastWeekEndDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastWeekCost", reflect.TypeOf((*MockIWeeklyCostExplorerClient)(nil).GetLastWeekCost), ctx, lastWeekStartDate, lastWeekEndDate)
}

// GetWeekBeforeLastCost mocks base method.
func (m *MockIWeeklyCostExplorerClient) GetWeekBeforeLastCost(ctx context.Context, weekBeforeLastStartDate, weekBeforeLastEndDate string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeekBeforeLastCost", ctx, weekBeforeLastStartDate, weekBeforeLastEndDate)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeekBeforeLastCost indicates an expected call of GetWeekBeforeLastCost.
func (mr *MockIWeeklyCostExplorerClientMockRecorder) GetWeekBeforeLastCost(ctx, weekBeforeLastStartDate, weekBeforeLastEndDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeekBeforeLastCost", reflect.TypeOf((*MockIWeeklyCostExplorerClient)(nil).GetWeekBeforeLastCost), ctx, weekBeforeLastStartDate, weekBeforeLastEndDate)
}
