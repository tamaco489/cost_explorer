// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/library/slack/slack.go
//
// Generated by this command:
//
//	mockgen -source=./internal/library/slack/slack.go -destination=./internal/library/slack/mock/slack.go -package=slack
//

// Package slack is a generated GoMock package.
package slack

import (
	context "context"
	reflect "reflect"

	slack "github.com/tamaco489/cost_explorer/batch/internal/library/slack"
	gomock "go.uber.org/mock/gomock"
)

// MockISlackClient is a mock of ISlackClient interface.
type MockISlackClient struct {
	ctrl     *gomock.Controller
	recorder *MockISlackClientMockRecorder
	isgomock struct{}
}

// MockISlackClientMockRecorder is the mock recorder for MockISlackClient.
type MockISlackClientMockRecorder struct {
	mock *MockISlackClient
}

// NewMockISlackClient creates a new mock instance.
func NewMockISlackClient(ctrl *gomock.Controller) *MockISlackClient {
	mock := &MockISlackClient{ctrl: ctrl}
	mock.recorder = &MockISlackClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISlackClient) EXPECT() *MockISlackClientMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockISlackClient) SendMessage(ctx context.Context, title string, attachment slack.Attachment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, title, attachment)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockISlackClientMockRecorder) SendMessage(ctx, title, attachment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockISlackClient)(nil).SendMessage), ctx, title, attachment)
}
