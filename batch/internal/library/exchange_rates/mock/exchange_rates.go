// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/library/exchange_rates/exchange_rates.go
//
// Generated by this command:
//
//	mockgen -source=./internal/library/exchange_rates/exchange_rates.go -destination=./internal/library/exchange_rates/mock/exchange_rates.go -package=exchange_rates
//

// Package exchange_rates is a generated GoMock package.
package exchange_rates

import (
	context "context"
	reflect "reflect"

	exchange_rates "github.com/tamaco489/cost_explorer/batch/internal/library/exchange_rates"
	gomock "go.uber.org/mock/gomock"
)

// MockIExchangeRatesClient is a mock of IExchangeRatesClient interface.
type MockIExchangeRatesClient struct {
	ctrl     *gomock.Controller
	recorder *MockIExchangeRatesClientMockRecorder
	isgomock struct{}
}

// MockIExchangeRatesClientMockRecorder is the mock recorder for MockIExchangeRatesClient.
type MockIExchangeRatesClientMockRecorder struct {
	mock *MockIExchangeRatesClient
}

// NewMockIExchangeRatesClient creates a new mock instance.
func NewMockIExchangeRatesClient(ctrl *gomock.Controller) *MockIExchangeRatesClient {
	mock := &MockIExchangeRatesClient{ctrl: ctrl}
	mock.recorder = &MockIExchangeRatesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExchangeRatesClient) EXPECT() *MockIExchangeRatesClientMockRecorder {
	return m.recorder
}

// GetExchangeRates mocks base method.
func (m *MockIExchangeRatesClient) GetExchangeRates(ctx context.Context, baseCurrencyCode string, exchangeCurrencyCodes []string) (*exchange_rates.ExchangeRatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRates", ctx, baseCurrencyCode, exchangeCurrencyCodes)
	ret0, _ := ret[0].(*exchange_rates.ExchangeRatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRates indicates an expected call of GetExchangeRates.
func (mr *MockIExchangeRatesClientMockRecorder) GetExchangeRates(ctx, baseCurrencyCode, exchangeCurrencyCodes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRates", reflect.TypeOf((*MockIExchangeRatesClient)(nil).GetExchangeRates), ctx, baseCurrencyCode, exchangeCurrencyCodes)
}
